// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingSystem.Models;

#nullable disable

namespace TicketingSystem.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220609174328_FinishedAddingColumns")]
    partial class FinishedAddingColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("PermissionsQueue", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QueuesId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionsId", "QueuesId");

                    b.HasIndex("QueuesId");

                    b.ToTable("PermissionsQueue");
                });

            modelBuilder.Entity("PermissionsUsers", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PermissionsUsers");
                });

            modelBuilder.Entity("TicketingSystem.Models.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TicketingSystem.Models.KnowledgeArticles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("KnowledgeArticles");
                });

            modelBuilder.Entity("TicketingSystem.Models.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("TicketingSystem.Models.ProblemTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProblemTickets");
                });

            modelBuilder.Entity("TicketingSystem.Models.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("TicketingSystem.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ProblemTicketId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("QueueId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UsersId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UsersId2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProblemTicketId");

                    b.HasIndex("QueueId");

                    b.HasIndex("UsersId");

                    b.HasIndex("UsersId1");

                    b.HasIndex("UsersId2");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketingSystem.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionsQueue", b =>
                {
                    b.HasOne("TicketingSystem.Models.Permissions", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Models.Queue", null)
                        .WithMany()
                        .HasForeignKey("QueuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionsUsers", b =>
                {
                    b.HasOne("TicketingSystem.Models.Permissions", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingSystem.Models.Comments", b =>
                {
                    b.HasOne("TicketingSystem.Models.Ticket", null)
                        .WithMany("Comments")
                        .HasForeignKey("TicketId");

                    b.HasOne("TicketingSystem.Models.Users", null)
                        .WithMany("Comments")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("TicketingSystem.Models.KnowledgeArticles", b =>
                {
                    b.HasOne("TicketingSystem.Models.Users", null)
                        .WithMany("KnowledgeArticlesLastEdited")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("TicketingSystem.Models.Ticket", b =>
                {
                    b.HasOne("TicketingSystem.Models.ProblemTicket", null)
                        .WithMany("Ticket")
                        .HasForeignKey("ProblemTicketId");

                    b.HasOne("TicketingSystem.Models.Queue", null)
                        .WithMany("TicketQueue")
                        .HasForeignKey("QueueId");

                    b.HasOne("TicketingSystem.Models.Users", null)
                        .WithMany("TicketAssignee")
                        .HasForeignKey("UsersId");

                    b.HasOne("TicketingSystem.Models.Users", null)
                        .WithMany("TicketClosedBy")
                        .HasForeignKey("UsersId1");

                    b.HasOne("TicketingSystem.Models.Users", null)
                        .WithMany("TicketSubmittedBy")
                        .HasForeignKey("UsersId2");
                });

            modelBuilder.Entity("TicketingSystem.Models.ProblemTicket", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketingSystem.Models.Queue", b =>
                {
                    b.Navigation("TicketQueue");
                });

            modelBuilder.Entity("TicketingSystem.Models.Ticket", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TicketingSystem.Models.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("KnowledgeArticlesLastEdited");

                    b.Navigation("TicketAssignee");

                    b.Navigation("TicketClosedBy");

                    b.Navigation("TicketSubmittedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
